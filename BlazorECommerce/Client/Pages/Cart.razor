@page "/cart"
@using BlazorECommerce.Shared.DTOs
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImgUrl" class="image" alt="@product.Title" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span>
                    <input
                        class="form-control input-quantity"
                        min="1"
                        type="number" 
                        value="@product.Quantity" 
                        @onchange="@((ChangeEventArgs args) => UpdateQuantity(args, product))" 
                    />
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        
        <div class="cart-product-price">
            Total (@cartProducts.Count): @cartProducts.Sum(product => product.Price * product.Quantity)
        </div>
    </div>
}

@code {

    List<CartProductResponseDTO>? cartProducts;
    string message = "Loading Cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }
    

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }
    
    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        
        if (cartProducts == null || cartProducts.Count == 0)
            message = "Your cart is empty.";
        else
            cartProducts = await CartService.GetCartProducts();
    }

    private async Task UpdateQuantity(ChangeEventArgs args, CartProductResponseDTO product)
    {
        product.Quantity = int.Parse(args.Value.ToString());

        if (product.Quantity < 1)
            product.Quantity = 1;

        await CartService.UpdateQuantity(product);
    }
}